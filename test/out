#!/usr/bin/env bash

set -e

cwd="$(cd "$(dirname "$0")" && pwd)"
# shellcheck disable=SC1090
source "$cwd/common"

uri="/tmp/remote-repo"

input="$(
jq \
    --null-input \
    --arg uri "$uri" \
    --arg branch master \
    --arg private_key "unused-in-this-test" \
    '{
       source: {
         uri: $uri,
         branch: $branch,
         private_key: $private_key,
         kustomization_yaml_path: "some-k8s/kustomization.yaml"
       },
       params: {}
     }'
)"

expected_output='{
  "version": "124",
  "metadata": [
    {
      "name": "tag",
      "value": "124"
    }
  ]
}'

image_id="$(cat "$cwd/../test_image_id")"

docker_output="$(
# shellcheck disable=SC1004,SC2016
docker run \
    --interactive \
    --entrypoint=bash \
    "$image_id" \
    -c \
    '
input="$(cat /dev/stdin)"
mkdir /tmp/remote-repo
(
cd "/tmp/remote-repo"
git init --bare --quiet
)
git clone /tmp/remote-repo local-repo
(
mkdir local-repo/some-k8s
touch local-repo/some-k8s/kustomization.yaml
cd local-repo/some-k8s
kustomize edit set image app=some-image:123
git add .
git config --global user.email "engineering@boclips.com"
git config --global user.name "A previous CI run"
git commit --quiet --message=LOL
git push
)

output="$(/opt/resource/out <<< "$input")"

git -C local-repo pull --quiet

jq --null-input \
    --raw-output \
    --arg newyaml "$(cat local-repo/some-k8s/kustomization.yaml)" \
    --arg output "$output" \
    '\''
{
  newyaml: $newyaml,
  output: $output
}
'\''
' <<< "$input"
)"

new_yaml="$(jq --raw-output .newyaml <<< "$docker_output")"
actual_output="$(jq --raw-output .output <<< "$docker_output")"

echo "out bumps emitted version"
assert_equal_json \
    "$expected_output" \
    "$actual_output"

echo "out pushes bumped version"
if echo "$new_yaml" | grep -q 'newTag: "124"' \
    && echo "$new_yaml" | grep -q 'boclips-version: "124"'
then
    echo "Test passed"
else
    echo "Test failed"
    echo
    echo "Expected to find the 124 tag in:"
    echo "$new_yaml"
    echo
    exit 1
fi

echo "out gives useful message when private key is unset"
output="$(run /opt/resource/out '{
    "source": {
        "uri": "git@github.com:boclips/kustomize-version-resource-test-repo"
    }
}' || true)"
assert_equal "Missing private key!" "$output"
