#!/usr/bin/env bash

set -e

cwd="$(cd "$(dirname "$0")" && pwd)"
# shellcheck disable=SC1090
source "$cwd/common"

dir=$(mktemp -d -t test-check.XXXXX)

clone_dir=/tmp/kustomize-version-resource
rm -rf "$clone_dir"

it "produces a version on first run"
init_kustomize_repo "$dir"
commit_image "app=eu.gcr.io/boclips-prod/boclips/my-app:1" "$dir"
push_kustomize_repo "$dir"

assert_equal_json \
    '[ { tag:"1", app: "my-app" } ]' \
    "$(run check '{
        source: {
            uri: "'"$dir/remote-repo"'",
            private_key: "something",
            kustomization_yaml_path: "k8s/base/kustomization.yaml"
        }
    }' \
    "$dir" \
    2> "$dir/stderr")"

it "logs that git will clone when using a new container"
assert_equal \
    'Cloning the repo' \
    "$(cat "$dir/stderr")"

it "produces multiple versions, given a prior version, on future runs"
commit_image "app=eu.gcr.io/boclips-prod/boclips/my-app:2" "$dir"
commit_image "app=eu.gcr.io/boclips-prod/boclips/my-app:3" "$dir"
commit_image "app=eu.gcr.io/boclips-prod/boclips/changed-app:4" "$dir"
push_kustomize_repo "$dir"

assert_equal_json \
    '[ { tag: "2", app: "changed-app"},
       { tag: "3", app: "changed-app"},
       { tag: "4", app: "changed-app"}
     ]' \
    "$(run check '{
        source: {
            uri: "'"$dir/remote-repo"'",
            private_key: "something",
            kustomization_yaml_path: "k8s/base/kustomization.yaml"
        },
        version: { tag: "2", app: "my-app" }
    }' \
    "$dir" \
    2> "$dir/stderr")"

it "logs that git will pull an existing repo"
assert_equal \
    "Pulling in existing repo, because $clone_dir/repo exists" \
    "$(cat "$dir/stderr")"

rm -rf "${dir:?}/*" "$clone_dir"

it "successfully checks GitHub repo"
uri="git@github.com:boclips/release-manifests.git"
private_key="$(bo show credential concourse-main boclips.release-manifests repo-key)"

input="$(
jq \
    --null-input \
    --arg uri "$uri" \
    --arg private_key "$private_key" \
    '{
       source: {
         uri: $uri,
         private_key: $private_key,
         kustomization_yaml_path: "k8s/gateway/base/kustomization.yaml"
       },
       version: {
         tag: "1"
       }
     }'
)"

assert_equal_json '
[
  { tag: "1", app: "gateway" },
  { tag: "2", app: "gateway" },
  { tag: "3", app: "gateway" },
  { tag: "4", app: "gateway" },
  { tag: "5", app: "gateway" },
  { tag: "6", app: "gateway" },
  { tag: "7", app: "gateway" },
  { tag: "8", app: "gateway" },
  { tag: "9", app: "gateway" },
  { tag: "10", app: "gateway" }
]
' \
    "$(run check \
    "$input" \
    "$dir" \
    2> /dev/null \
    | jq '.[0:10]')"
