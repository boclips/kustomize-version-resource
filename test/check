#!/usr/bin/env bash

set -e

cwd="$(cd "$(dirname "$0")" && pwd)"
# shellcheck disable=SC1090
source "$cwd/common"

frontend_uri="git@github.com:boclips/frontend.git"
frontend_private_key="$(bo show credential concourse-main boclips.frontend repo-key)"
frontend_commit_with_9_version=08d9a42b628a3c09ea8e42f915d69c97946170d7

frontend_input="$(
jq \
    --null-input \
    --arg uri "$frontend_uri" \
    --arg branch "$frontend_commit_with_9_version" \
    --arg private_key "$frontend_private_key" \
    '{
       source: {
         uri: $uri,
         branch: $branch,
         private_key: $private_key,
         kustomization_yaml_path: "k8s/boclips/base/kustomization.yaml"
       },
       version: {
         tag: "1"
       }
     }'
)"

expected_frontend_output="$(cat <<EOF
[
  { "tag": "1" },
  { "tag": "2" },
  { "tag": "3" },
  { "tag": "4" },
  { "tag": "5" },
  { "tag": "6" },
  { "tag": "7" },
  { "tag": "8" },
  { "tag": "9" }
]
EOF
)"

(
    container_id="$(create /opt/resource/check)"
    dir=$(mktemp -d -t test-check.XXXXX)

    echo "First run produces a version"
    init_repo "$container_id" "$dir"
    bump_version 1 "$dir"
    copy_kustomize_repo "$container_id" remote-repo-v1 "$dir"

    assert_equal_json \
        '[{"tag":"1"}]' \
        "$(start_container "$container_id" '{
            "source": {
                "uri": "/tmp/remote-repo-v1",
                "branch": "master",
                "private_key": "something"
            }
        }')"

    echo "Future run produces multiple versions given prior version"
    bump_version 2 "$dir"
    bump_version 3 "$dir"
    bump_version 4 "$dir"
    copy_kustomize_repo "$container_id" remote-repo-v2 "$dir"

    assert_equal_json \
        '[{"tag":"2"},{"tag":"3"},{"tag":"4"}]' \
        "$(start_container "$container_id" '{
            "source": {
                "uri": "/tmp/remote-repo-v2",
                "branch": "master",
                "private_key": "something"
            },
            "version": {
                "tag": "2"
            }
        }')"

    rm -rf "$dir"
    docker rm "$container_id" > /dev/null
)

echo "check repo with explicit kustomization.yaml path"
assert_equal_json \
    "$expected_frontend_output" \
    "$(run /opt/resource/check "$frontend_input")"
